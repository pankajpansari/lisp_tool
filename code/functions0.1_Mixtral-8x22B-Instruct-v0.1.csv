FunctionName,Explanation,Definition,Test1,Res1,Test2,Res2,Test3,Res3
lat?,Checks if a list is a list of atoms," (define lat?
(lambda (l)
(cond
((null? l) #t)
((atom? (car l)) (lat? (cdr l)))
(else #f))))",(display (lat? ‘(“here” “is” “a” “lat”))),#t,(display (lat? ‘(“is” (“not” “a” “lat”)))),#f,(display (lat? ‘(“is” “a” “lat”))),#t
member?,Checks if an atom is a member of a list," ```
(define member?
  (lambda (m l)
    (cond
      ((null? l) #f)
      ((eq? m (car l)) #t)
      (else (member? m (cdr l))))))
```", (member? “meat” (“meat” “is” “here”)),#t, (member? “meat” (“fish” “is” “here”)),#f, (member? “fish” (“meat” “is” “here”)),#t
rember,Removes the first occurrence of an atom from a list," (define rember
(lambda (a l)
(cond
((null? l) ())
((eq? a (car l)) (cons (rember a (cdr l)) a))
(else (cons (rember a (cdr l)) (car l))))))",,,,,,
firsts,Returns a list of the first S-expression of each internal list," (define firsts
(lambda (l)
(cond
((null? l) ())
(else (cons (car l) (firsts (cdr l)))))))",,,,,,
insertR,Inserts an atom to the right of the first occurrence of another atom in a list," (define insertR
  (lambda (m x l)
    (cond
      ((null? l) (cons l m))
      ((eq? (car l) x) (cons (cons (cdr l) x) m))
      (else (cons (insertR m x (cdr l)) (car l))))))",,,,,,
insertL,Inserts an atom to the left of the first occurrence of another atom in a list," ```
(define insertL
  (lambda (m ot l)
    (cond
      ((null? l) (cons l m))
      ((eq? (car l) ot) (cons (cons m (car l)) (cdr l)))
      (else (cons (insertL m ot (cdr l)) (car l))))))
```",,,,,,
subst,Substitutes the first occurrence of an old atom with a new atom in a list," ```
(define subst
  (lambda (old new lst)
    (cond
      ((null? lst) ())
      ((eq? (car lst) old) (cons new (defined (subst old new (cdr lst)))))
      (else (cons (car lst) (defined (subst old new (cdr lst))))))))
```",,,,,,
subst2,Substitutes the first occurrence of either of two old atoms with a new atom," (define subst2
(lambda (new old1 old2 lst)
(cond
((null? lst) ())
((eq? (car lst) old1) (cons (subst2 new old1 old2 (cdr lst)) new))
((eq? (car lst) old2) (cons (subst2 new old1 old2 (cdr lst)) new))
(else (cons (subst2 new old1 old2 (cdr lst)) (car lst))))))",,,,,,
multirember,Removes all occurrences of an atom from a list," (define multirember
(lambda (a l)
(cond
((null? l) ())
((eq? a (car l)) (multirember a (cdr l)))
(else (cons (multirember a (cdr l)) (car l))))))",,,,,,
multiinsertR,Inserts a new atom to the right of every occurrence of an old atom in a list," ```
(define multiinsertR
  (lambda (new old l)
    (cond
      ((null? l) ())
      ((eq? (car l) old) (cons (multiinsertR new old (cdr l)) new))
      (else (cons (multiinsertR new old (cdr l)) (car l))))))
```",,,,,,
multiinsertL,Inserts a new atom to the left of every occurrence of an old atom in a list," ```
(define multiinsertL
  (lambda (new old l)
    (cond
      ((null? l) ())
      ((eq? (car l) old) (cons (cons new (multiinsertL new old (cdr l))) (car l)))
      (else (cons (multiinsertL new old (cdr l)) (car l))))))
```",,,,,,
multisubst,Substitutes all occurrences of an old atom with a new atom in a list," (define multisubst
(lambda (old new lst)
(cond
((null? lst) ())
((eq? (car lst) old) (cons (multisubst old new (cdr lst)) new))
(else (cons (multisubst old new (cdr lst)) (car lst))))))",,,,,,
add1,Adds 1 to a number," (define add1
  (lambda (n)
    (cond
      ((atom? n) (cond
                    ((eq? n '+) (+ n 1))
                    (else n)))
      (else n))))",,,,,,
add,Adds two numbers," (define add
(lambda (x y)
(cond
((atom? x) (atom? y)) (add1 (+ x y))
(else ""Error: Both arguments must be numbers.""))))",,,,,,
subtract,Subtracts one number from another," (define subtcart
(lambda (x y)
(cond
((atom? x) (cond
((atom? y) (- x y))
(else (error ""Second argument must be a number""))))
(else (error ""First argument must be a number"")))))",,,,,,
addtup,Adds all numbers in a tuple (list of numbers)," (define addtup
(lambda (l)
(cond
((null? l) 0)
((atom? (car l)) (+ (car l) (addtup (cdr l))))
(else 0))))",,,,,,
multiply,Multiplies two numbers," (define multiply
(lambda (x y)
(cond
((atom? x) (atom? y) (add (addtup (make-list x y)) (addtup (make-list y x))))
(else 0))))

(define make-list
(lambda (x y)
(cond
((= x 0) ())
(else (cons (make-list (- x 1) y) y)))))",,,,,,
tup+,Adds corresponding elements of two tuples," (define tup+
(lambda (t1 t2)
(cond
((and (null? t1) (null? t2)) ())
(else
(cons
(add (car t1) (car t2))
(tup+ (cdr t1) (cdr t2)))))))",,,,,,
>,Checks if first number is greater than second," (define >
(lambda (n1 lst)
(cond
((null? lst) #f)
((atom? (car lst))
(cond
((atom? n1)
(cond
((number? n1)
(cond
(((number? (car lst)))
(> n1 (car lst)))
(else #f)))
(else #f)))
(else #f)))
(else #f))))",,,,,,
<,Checks if first number is less than second," (define <
(lambda (x y)
(cond
((atom? x) (atom? y) (< x y) #t)
(else #f))))",,,,,,
=,Checks if two numbers are equal," (define =
(lambda (x y)
(cond
((atom? x) (cond
((atom? y) (cond
((number? x) (cond
((number? y) (= x y))
(else #f))))
(else #f)))
(else #f))
(else #f))))",,,,,,
^,Raises a number to a power (exponent)," (define ^
(lambda (base exp)
(cond
((= exp 0) 1)
((< exp 0) (/ 1 (^ base (- exp))))
(else (* base (^ base (- exp 1)))))))",,,,,,
/,Divides one number by another," (define /
(lambda (x y)
(cond
((= y 0) ""Error: Division by zero"")
(else (/ x y)))))",,,,,,
length,Calculates the length of a list," (define length
(lambda (l)
(cond
((null? l) 0)
(else (add1 (length (cdr l)))))))",,,,,,
pick,Selects the nth element from a list," (define pick
(lambda (n l)
(cond
((= n 1) (car l))
((null? l) ())
(else (pick (- n 1) (cdr l))))))",,,,,,
rempick,Removes the nth element from a list," (define rempick
  (lambda (n l)
    (cond
      ((= n 1) (cdr l))
      ((null? l) ())
      (else (cons (car l) (rempick (- n 1) (cdr l)))))))",,,,,,
number?,Checks if an S-expression is a number," (define number?
  (lambda (s)
    (cond
      ((atom? s) (eq? (type s) 'number))
      (else #f))))",,,,,,
no-nums,Removes all numbers from a list," (define no-nums
  (lambda (l)
    (cond
      ((null? l) ())
      ((number? (car l)) (no-nums (cdr l)))
      (else (cons (no-nums (cdr l)) (car l))))))",,,,,,
occur,Counts occurrences of an atom in a list," (define occur
(lambda (m l)
(cond
((null? l) 0)
((eq? m (car l)) (+ 1 (occur m (cdr l))))
(else (occur m (cdr l))))))",,,,,,
all-nums,Extracts all numbers from a list," (define all-nums
  (lambda (l)
    (cond
      ((null? l) ())
      ((number? (car l)) (cons (all-nums (cdr l)) (car l)))
      (else (all-nums (cdr l))))))",,,,,,
one?,Checks if a number is 1," (define one?
(lambda (n)
(cond
((number? n) (= n 1))
(else #f))))",,,,,,
eqan?,Checks if two arguments are equal (atom or number)," (define eqan?
(lambda (a b)
(cond
((and (atom? a) (atom? b)) (eq? a b))
((and (number? a) (number? b)) (= a b))
(else #f))))",,,,,,
rember*,Removes all occurrences of an atom from all levels of a nested list," (define rember*
(lambda (m l)
(cond
((null? l) ())
((atom? (car l)) (cons (rember* m (car l)) (rember* m (cdr l))))
((list? (car l)) (cons (rember* m (car l)) (rember* m (cdr l))))
(else l))))",,,,,,
insertR*,Inserts new atom to the right of all occurrences of old atom in a nested list," (define insertR\*
(lambda (new old l)
(cond
((null? l) ())
((atom? l) (cond ((eq? l old) (cons l (cons new ()))) (else (cons l ()))))
(else (map (lambda (x) (insertR\* new old x)) l)))))",,,,,,
occur*,Counts occurrences of an atom in a nested list," (define occur*
  (lambda (m l)
    (cond
      ((null? l) 0)
      ((atom? (car l))
       (cond
         ((eq? m (car l)) (+ 1 (occur* m (cdr l))))
         (else (occur* m (cdr l)))))
      (else
        (+ (occur* m (car l)) (occur* m (cdr l)))))))",,,,,,
subst*,Substitutes new atom for all occurrences of old atom in a nested list," (define subst*
(lambda (old new lst)
(cond
((null? lst) ())
((atom? lst) (if (eq? old lst) new lst))
(else (cons (subst* old new (cdr lst)) (subst* old new (car lst)))))))",,,,,,
insertL*,Inserts new atom to the left of all occurrences of old atom in a nested list," (define insertL\*
(lambda (new old l)
(cond
((null? l) ())
((atom? (car l)) (cons (insertL new old (car l)) (insertL\* new old (cdr l))))
(else (cons (map (lambda (x) (insertL\* new old x)) l) ()))))
)",,,,,,
member*,Checks if an atom is a member of a nested list," (define member*
  (lambda (m l)
    (cond
      ((null? l) #f)
      ((atom? (car l)) (or (eq? m (car l)) (member* m (cdr l))))
      ((list? (car l)) (or (member* m (car l)) (member* m (cdr l))))
      (else #f))))",,,,,,
leftmost,Finds the leftmost atom in a nested non-empty list of atoms," (define leftmost
  (lambda (l)
    (cond
      ((null? l) ())
      ((atom? (car l)) (car l))
      (else (leftmost (car l))))))",,,,,,
eqlist?,Checks if two lists are equal," (define eqlist?
(lambda (l1 l2)
(cond
((and (null? l1) (null? l2)) #t)
((or (null? l1) (null? l2)) #f)
((and (atom? (car l1)) (atom? (car l2))) (eq? (car l1) (car l2)) (eqlist? (cdr l1) (cdr l2)))
((and (list? (car l1)) (list? (car l2))) (eqlist? (car l1) (car l2)) (eqlist? (cdr l1) (cdr l2)))
(else #f))))",,,,,,
equal?,Checks if two S-expressions are equal," (define equal?
(lambda (a b)
(cond
((atom? a) (cond ((atom? b) (eq? a b)) (else #f)))
((list? a) (cond ((list? b) (eqlist? a b)) (else #f)))
(else #f))))",,,,,,
numbered?,"Determines if a representation of an arithmetic expression contains only numbers apart from +, multiply and ^"," (define numbered?
  (lambda (exp)
    (cond
      ((null? exp) #t)
      ((atom? (car exp))
       (cond
         ((eq? (car exp) '+) (numbered? (cdr exp)))
         ((eq? (car exp) 'multiply) (numbered? (cdr exp)))
         ((eq? (car exp) '^) (numbered? (cdr exp)))
         ((number? (car exp)) (numbered? (cdr exp)))
         (else #f)))
      (else #f))))",,,,,,
value,Evaluates a numbered arithmetic expression," (define value
(lambda (expr)
(cond
((number? expr) expr)
((eqan? (car expr) '+) (+ (value (defined expr)) (value (defined (defined expr)))))
((eqan? (car expr) '-) (- (value (defined expr)) (value (defined (defined expr)))))
((eqan? (car expr) '*) (* (value (defined expr)) (value (defined (defined expr)))))
((eqan? (car expr) '^) (^ (value (defined expr)) (value (defined (defined expr)))))
(else (error ""Invalid arithmetic expression"")))))",,,,,,
1st-sub-exp,Extracts the first sub-expression of an arithmetic expression," (define 1st-sub-exp
  (lambda (exp)
    (cond
      ((number? exp) exp)
      ((atom? exp) exp)
      ((null? exp) ())
      (else (car exp)))))",,,,,,
2nd-sub-exp,Extracts the second sub-expression of an arithmetic expression," (define 2nd-sub-exp
  (lambda (exp)
    (cond
      ((number? exp) ())
      ((= (length exp) 1) ())
      ((= (length exp) 2) (car exp))
      ((eqan? (car exp) '+) (cons (car (cdr exp)) (2nd-sub-exp (cdr (cdr exp)))))
      ((eqan? (car exp) 'multiply) (cons (car (cdr exp)) (2nd-sub-exp (cdr (cdr exp)))))
      ((eqan? (car exp) '^) (cons (car (cdr exp)) (2nd-sub-exp (cdr (cdr exp)))))
      (else ()))))",,,,,,
operator,Extracts the operator from an arithmetic expression," (define operator
(lambda (exp)
(cond
((numbered? exp) (cond
((= (length exp) 3) (car exp))
((= (length exp) 1) (car exp))
(else (defined ""Invalid arithmetic expression"" exp))))
(else (defined ""Invalid arithmetic expression"" exp)))))",,,,,,
sero?,Checks if a number represented as a list is zero," (define sero?
(lambda (l)
(cond
((number? (lat? l)) (= (addtup l) 0))
(else #f))))",,,,,,
edd1,Adds 1 to a number represented as a list," (define edd1
(lambda (l)
(cond
((number? (car l)) (cons (add1 (car l)) (cdr l)))
(else l))))",,,,,,
zub1,Subtracts 1 from a number represented as a list," (define zub1
(lambda (n)
(cond
((sero? n) ())
(else (edd1 (zub1 (car n)))))))",,,,,,
+,Expands definition of + to add two numbers represented as a list," (define +
(lambda (n1 n2)
(cond
((and (number? n1) (number? n2)) (add (value n1) (value n2)))
(else (error ""Both arguments must be numbers"")))))",,,,,,
set?,Checks if a list is a set (no duplicates)," (define set?
  (lambda (l)
    (cond
      ((null? l) #t)
      ((atom? (car l))
       (and (not (member? (car l) (cdr l))) (set? (cdr l))))
      (else #f))))",,,,,,
makeset,Removes duplicates from a list to make a set," (define makeset
  (lambda (l)
    (cond
      ((null? l) ())
      (else
        (lambda (rest)
          (cond
            ((null? rest) (cons (car l) ()))
            ((member? (car l) rest) (makeset rest))
            (else (cons (car l) (makeset rest))))))))))",,,,,,
